#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
pub enum CmdType {
  Inner,
  Outer,
  OuterNamed,
}

use CmdType::*;

pub const COMMANDS: &[(&str, CmdType)] = &[
  ("(*", Inner),
  ("*)", Inner),
  (".", Inner),
  ("..", Inner),
  ("ML", Outer),
  ("ML_command", Outer),
  ("ML_export", Outer),
  ("ML_file", Outer),
  ("ML_file_debug", Outer),
  ("ML_file_no_debug", Outer),
  ("ML_prf", Inner),
  ("ML_val", Outer),
  ("SML_export", Outer),
  ("SML_file", Outer),
  ("SML_file_debug", Outer),
  ("SML_file_no_debug", Outer),
  ("SML_import", Outer),
  ("\\<comment>", Inner),
  ("\\<proof>", Inner),
  ("abbreviation", OuterNamed),
  ("alias", OuterNamed),
  ("also", Inner),
  ("apply", Inner),
  ("apply_end", Inner),
  ("assume", Inner),
  ("attribute_setup", OuterNamed),
  ("axiomatization", OuterNamed),
  ("back", Inner),
  ("bibtex_file", Outer),
  ("bnf", Outer),
  ("bundle", OuterNamed),
  ("by", Inner),
  ("case", Inner),
  ("chapter", Outer),
  ("class", Outer),
  ("class_deps", Outer),
  ("codatatype", OuterNamed),
  ("code_datatype", OuterNamed),
  ("code_deps", OuterNamed),
  ("code_identifier", Outer),
  ("code_monad", OuterNamed),
  ("code_pred", Outer),
  ("code_printing", Outer),
  ("code_reflect", OuterNamed),
  ("code_reserved", Outer),
  ("code_thms", OuterNamed),
  ("coinductive", OuterNamed),
  ("coinductive_set", OuterNamed),
  ("compile_generated_files", Outer),
  ("consider", Inner),
  ("consts", OuterNamed),
  ("context", Outer),
  ("copy_bnf", Outer),
  ("corollary", OuterNamed),
  ("datatype", OuterNamed),
  ("datatype_compat", Outer),
  ("declaration", Outer),
  ("declare", OuterNamed),
  ("default_sort", Outer),
  ("defer", Inner),
  ("define", Inner),
  ("definition", OuterNamed),
  ("done", Inner),
  ("end", Outer),
  ("experiment", Outer),
  ("export_code", Outer),
  ("export_generated_files", Outer),
  ("external_file", Outer),
  ("extract", OuterNamed),
  ("extract_type", Outer),
  ("finally", Inner),
  ("find_consts", Outer),
  ("find_theorems", Outer),
  ("find_unused_assms", Outer),
  ("fix", Inner),
  ("free_constructors", OuterNamed),
  ("from", Inner),
  ("full_prf", OuterNamed),
  ("fun", OuterNamed),
  ("fun_cases", Outer),
  ("function", OuterNamed),
  ("functor", Outer),
  ("generate_file", Outer),
  ("global_interpretation", Outer),
  ("guess", Inner),
  ("have", Inner),
  ("help", Outer),
  ("hence", Inner),
  ("hide_class", OuterNamed),
  ("hide_const", OuterNamed),
  ("hide_fact", OuterNamed),
  ("hide_type", OuterNamed),
  ("include", Inner),
  ("including", Inner),
  ("inductive", OuterNamed),
  ("inductive_cases", Outer),
  ("inductive_set", OuterNamed),
  ("inductive_simps", Outer),
  ("instance", OuterNamed),
  ("instantiation", OuterNamed),
  ("interpret", Inner),
  ("interpretation", Outer),
  ("judgment", OuterNamed),
  ("lemma", OuterNamed),
  ("lemmas", Outer),
  ("let", Inner),
  ("lift_bnf", OuterNamed),
  ("lift_definition", OuterNamed),
  ("lifting_forget", OuterNamed),
  ("lifting_update", OuterNamed),
  ("local_setup", Outer),
  ("locale", OuterNamed),
  ("locale_deps", Outer),
  ("method_setup", OuterNamed),
  ("moreover", Inner),
  ("named_theorems", Outer),
  ("next", Inner),
  ("nitpick", Inner),
  ("nitpick_params", Outer),
  ("no_notation", Outer),
  ("no_syntax", Outer),
  ("no_translations", Outer),
  ("no_type_notation", Outer),
  ("nonterminal", Outer),
  ("notation", Outer),
  ("note", Inner),
  ("notepad", Outer),
  ("nunchaku", Inner),
  ("nunchaku_params", Outer),
  ("obtain", Inner),
  ("old_rep_datatype", OuterNamed),
  ("oops", Inner),
  ("oracle", OuterNamed),
  ("overloading", OuterNamed),
  ("paragraph", Outer),
  ("parse_ast_translation", Outer),
  ("parse_translation", Outer),
  ("partial_function", OuterNamed),
  ("prefer", Inner),
  ("presume", Inner),
  ("prf", OuterNamed),
  ("primcorec", OuterNamed),
  ("primcorecursive", OuterNamed),
  ("primrec", OuterNamed),
  ("print_ML_antiquotations", Outer),
  ("print_abbrevs", Outer),
  ("print_antiquotations", Outer),
  ("print_ast_translation", Outer),
  ("print_attributes", Outer),
  ("print_bnfs", Outer),
  ("print_bundles", Outer),
  ("print_case_translations", Outer),
  ("print_cases", Outer),
  ("print_claset", Outer),
  ("print_classes", Outer),
  ("print_codeproc", Outer),
  ("print_codesetup", Outer),
  ("print_coercions", Outer),
  ("print_commands", Outer),
  ("print_context", Outer),
  ("print_definitions", Outer),
  ("print_defn_rules", Outer),
  ("print_facts", Outer),
  ("print_induct_rules", Outer),
  ("print_inductives", Outer),
  ("print_interps", Outer),
  ("print_locale", Outer),
  ("print_locales", Outer),
  ("print_methods", Outer),
  ("print_options", Outer),
  ("print_orders", Outer),
  ("print_quot_maps", Outer),
  ("print_quotconsts", Outer),
  ("print_quotients", Outer),
  ("print_quotientsQ3", Outer),
  ("print_quotmapsQ3", Outer),
  ("print_record", Outer),
  ("print_rules", Outer),
  ("print_simpset", Outer),
  ("print_state", Outer),
  ("print_statement", Outer),
  ("print_syntax", Outer),
  ("print_term_bindings", Outer),
  ("print_theorems", Outer),
  ("print_theory", Outer),
  ("print_trans_rules", Outer),
  ("print_translation", Outer),
  ("proof", Inner),
  ("prop", Outer),
  ("proposition", OuterNamed),
  ("qed", Inner),
  ("quickcheck", Inner),
  ("quickcheck_generator", Outer),
  ("quickcheck_params", Outer),
  ("quotient_definition", OuterNamed),
  ("quotient_type", OuterNamed),
  ("realizability", Outer),
  ("realizers", OuterNamed),
  ("record", OuterNamed),
  ("schematic_goal", Outer),
  ("section", Outer),
  ("setup", Outer),
  ("setup_lifting", Outer),
  ("show", Inner),
  ("simproc_setup", Outer),
  ("sledgehammer", Inner),
  ("sledgehammer_params", Outer),
  ("smt_status", Outer),
  ("solve_direct", Inner),
  ("sorry", Inner),
  ("specification", Outer),
  ("subclass", OuterNamed),
  ("subgoal", Inner),
  ("sublocale", OuterNamed),
  ("subparagraph", Outer),
  ("subsection", Outer),
  ("subsubsection", Outer),
  ("supply", Inner),
  ("syntax", Outer),
  ("syntax_declaration", Outer),
  ("term", Outer),
  ("termination", OuterNamed),
  ("text", Outer),
  ("text_raw", Outer),
  ("then", Inner),
  ("theorem", OuterNamed),
  ("theory", OuterNamed),
  ("thm", OuterNamed),
  ("thm_deps", Outer),
  ("thm_oracles", OuterNamed),
  ("thus", Inner),
  ("thy_deps", Outer),
  ("translations", Outer),
  ("try", Inner),
  ("try0", Inner),
  ("txt", Outer),
  ("typ", OuterNamed),
  ("type_alias", OuterNamed),
  ("type_notation", OuterNamed),
  ("type_synonym", OuterNamed),
  ("typed_print_translation", Outer),
  ("typedecl", OuterNamed),
  ("typedef", OuterNamed),
  ("ultimately", Inner),
  ("unbundle", OuterNamed),
  ("unfolding", Inner),
  ("unused_thms", Outer),
  ("using", Inner),
  ("value", Outer),
  ("values", Outer),
  ("welcome", Outer),
  ("with", Inner),
  ("write", Inner),
];

pub fn get_cmd_type(key: &str) -> Option<CmdType> {
  COMMANDS
    .binary_search_by(|(k, _)| k.cmp(&key))
    .map(|x| COMMANDS[x].1)
    .ok()
}
